/*
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MembershipApplication
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-28T14:44:25.609+02:00")
public class MembershipApplication {
  @SerializedName("success")
  private Boolean success = null;

  @SerializedName("active")
  private Boolean active = null;

  /**
   * The membership status of this application
   */
  @JsonAdapter(MembershipEnum.Adapter.class)
  public enum MembershipEnum {
    MEMBER("member"),
    
    PENDING("pending");

    private String value;

    MembershipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembershipEnum fromValue(String text) {
      for (MembershipEnum b : MembershipEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MembershipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembershipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembershipEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MembershipEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("membership")
  private MembershipEnum membership = null;

  public MembershipApplication success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Whether the application for membership was successfully submitted
   * @return success
  **/
  @ApiModelProperty(value = "Whether the application for membership was successfully submitted")
  public Boolean isSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }

  public MembershipApplication active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Whether the membership is currently active
   * @return active
  **/
  @ApiModelProperty(value = "Whether the membership is currently active")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public MembershipApplication membership(MembershipEnum membership) {
    this.membership = membership;
    return this;
  }

   /**
   * The membership status of this application
   * @return membership
  **/
  @ApiModelProperty(value = "The membership status of this application")
  public MembershipEnum getMembership() {
    return membership;
  }

  public void setMembership(MembershipEnum membership) {
    this.membership = membership;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembershipApplication membershipApplication = (MembershipApplication) o;
    return Objects.equals(this.success, membershipApplication.success) &&
        Objects.equals(this.active, membershipApplication.active) &&
        Objects.equals(this.membership, membershipApplication.membership);
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, active, membership);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembershipApplication {\n");
    
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    membership: ").append(toIndentedString(membership)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

